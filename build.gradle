buildscript {
	ext {
		springBootVersion = '1.5.10.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath 'org.hidetake:gradle-ssh-plugin:1.1.3'
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'
apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'
apply plugin: 'maven-publish'

group = 'uk.ac.ebi.subs'
version = '0.1.0-SNAPSHOT'
sourceCompatibility = 1.8

mainClassName = "uk.ac.ebi.subs.fileupload.filechecksumlistener.FileChecksumListenerApplication"

repositories {
	mavenCentral()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-amqp')
    compile('uk.ac.ebi.subs:subs-messaging:0.4.0-SNAPSHOT')

    testCompile('org.springframework.boot:spring-boot-starter-test')
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        exceptionFormat "full"
    }
}

springBoot {
    executable = true
}

ext.gradle_env = hasProperty('env') ? env : 'dev'

publish {
    dependsOn assemble
}

remotes {
    devFCC {
        role('dev')
        host = project.hasProperty(project.name + "DevDeployTarget") ? getProperty(project.name + "DevDeployTarget") : 'localhost'
    }
    testFCC {
        role('test')
        host = project.hasProperty(project.name + "TestDeployTarget") ? getProperty(project.name + "TestDeployTarget") : 'localhost'
    }
    prodFCC {
        role('prod')
        host = project.hasProperty(project.name + "ProdDeployTarget") ? getProperty(project.name + "ProdDeployTarget") : 'localhost'
    }
}

ssh.settings {
    user = 'sub_adm'
}

if (project.hasProperty('sshKeyFile')) {
    ssh.settings.identity = new File(sshKeyFile)
}

if (project.hasProperty('sshPassphrase')) {
    ssh.settings.passphrase = sshPassphrase
}

task deployJar(type: SshTask, dependsOn: 'build') {
    doLast {
        sshRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

task testSsh(type: SshTask) {
    doLast {
        sshTestRun()
    }
    ssh.settings {
        knownHosts = allowAnyHosts
    }
}

private Object sshRun() {
    ssh.run {
        session(remotes.role(gradle_env)) {
            def jarFileName = project.name + "-"  + project.version + "." + System.currentTimeMillis() + ".jar"
            File jarDeployFile = new File("/homes/sub_adm/apps/$env/$project.name/jar",jarFileName)
            File jarDeployDir = jarDeployFile.getParentFile()
            println "Uploading jar $jar.archivePath.name to $jarDeployFile.absolutePath area on $remote"
            put(jar.archivePath.absolutePath, jarDeployFile.absolutePath)
            println "creating symbolic link to $jar.archiveName"
            def result = execute "ln -s -f $jarDeployFile.absolutePath $jarDeployDir/$jar.baseName" + ".jar", ignoreError: true
            println result
            println "updating permissions of $jarDeployDir/$jar.archiveName"
            execute "chmod u+x $jarDeployDir/*", ignoreError: false
        }
    }
}

private Object sshTestRun(){
    ssh.run {
        session(remotes.role(gradle_env)){
            println "started ssh session"
        }
    }
}
